    def test_output(self, outfile, expected_out, expected_err, capfd):
        t = termlog.TermLog(outfile=outfile)
        with taddons.context(t) as tctx:
            tctx.options.termlog_verbosity = "info"
            tctx.configure(t)
>           t.log(log.LogEntry("one", "info"))

test\mitmproxy\addons\test_termlog.py:21:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mitmproxy\addons\termlog.py:37: in log
    err=(e.level == "error")
.tox\py37\lib\site-packages\click\termui.py:420: in secho
    return echo(style(text, **styles), file=file, nl=nl, err=err, color=color)
.tox\py37\lib\site-packages\click\utils.py:259: in echo
    file.write(message)
.tox\py37\lib\site-packages\click\_compat.py:577: in _safe_write
    return _write(s)
.tox\py37\lib\site-packages\colorama\ansitowin32.py:41: in write
    self.__convertor.write(text)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <colorama.ansitowin32.AnsiToWin32 object at 0x0000000004E7C2E8>, text = '\x1b[22mone\x1b[0m\n'

    def write(self, text):
        if self.strip or self.convert:
            self.write_and_convert(text)
        else:
>           self.wrapped.write(text)
E           OSError: [WinError 6] 句柄无效。

.tox\py37\lib\site-packages\colorama\ansitowin32.py:156: OSError
___________________________ TestTermLog.test_output[outfile1-expected_out1-expected_err1] ____________________________

self = <test.mitmproxy.addons.test_termlog.TestTermLog object at 0x00000000088244E0>
outfile = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, expected_out = ['one', 'three', 'four']
expected_err = [], capfd = <_pytest.capture.CaptureFixture object at 0x000000000882FDA0>

    @pytest.mark.usefixtures('capfd')
    @pytest.mark.parametrize('outfile, expected_out, expected_err', [
        (None, ['one', 'three'], ['four']),
        (sys.stdout, ['one', 'three', 'four'], []),
        (sys.stderr, [], ['one', 'three', 'four']),
    ])
    def test_output(self, outfile, expected_out, expected_err, capfd):
        t = termlog.TermLog(outfile=outfile)
        with taddons.context(t) as tctx:
            tctx.options.termlog_verbosity = "info"
            tctx.configure(t)
>           t.log(log.LogEntry("one", "info"))

test\mitmproxy\addons\test_termlog.py:21:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mitmproxy\addons\termlog.py:37: in log
    err=(e.level == "error")
.tox\py37\lib\site-packages\click\termui.py:420: in secho
    return echo(style(text, **styles), file=file, nl=nl, err=err, color=color)
.tox\py37\lib\site-packages\click\utils.py:259: in echo
    file.write(message)
.tox\py37\lib\site-packages\click\_compat.py:577: in _safe_write
    return _write(s)
.tox\py37\lib\site-packages\colorama\ansitowin32.py:41: in write
    self.__convertor.write(text)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <colorama.ansitowin32.AnsiToWin32 object at 0x0000000004E7C2E8>, text = '\x1b[22mone\x1b[0m\n'

    def write(self, text):
        if self.strip or self.convert:
            self.write_and_convert(text)
        else:
>           self.wrapped.write(text)
E           OSError: [WinError 6] 句柄无效。

.tox\py37\lib\site-packages\colorama\ansitowin32.py:156: OSError
___________________________ TestTermLog.test_output[outfile2-expected_out2-expected_err2] ____________________________

self = <test.mitmproxy.addons.test_termlog.TestTermLog object at 0x00000000088EEF60>
outfile = <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, expected_out = []
expected_err = ['one', 'three', 'four'], capfd = <_pytest.capture.CaptureFixture object at 0x00000000088EE9B0>

    @pytest.mark.usefixtures('capfd')
    @pytest.mark.parametrize('outfile, expected_out, expected_err', [
        (None, ['one', 'three'], ['four']),
        (sys.stdout, ['one', 'three', 'four'], []),
        (sys.stderr, [], ['one', 'three', 'four']),
    ])
    def test_output(self, outfile, expected_out, expected_err, capfd):
        t = termlog.TermLog(outfile=outfile)
        with taddons.context(t) as tctx:
            tctx.options.termlog_verbosity = "info"
            tctx.configure(t)
>           t.log(log.LogEntry("one", "info"))

test\mitmproxy\addons\test_termlog.py:21:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mitmproxy\addons\termlog.py:37: in log
    err=(e.level == "error")
.tox\py37\lib\site-packages\click\termui.py:420: in secho
    return echo(style(text, **styles), file=file, nl=nl, err=err, color=color)
.tox\py37\lib\site-packages\click\utils.py:259: in echo
    file.write(message)
.tox\py37\lib\site-packages\click\_compat.py:577: in _safe_write
    return _write(s)
.tox\py37\lib\site-packages\colorama\ansitowin32.py:41: in write
    self.__convertor.write(text)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <colorama.ansitowin32.AnsiToWin32 object at 0x000000000895E390>, text = '\x1b[22mone\x1b[0m\n'

    def write(self, text):
        if self.strip or self.convert:
            self.write_and_convert(text)
        else:
>           self.wrapped.write(text)
E           OSError: [WinError 6] 句柄无效。

.tox\py37\lib\site-packages\colorama\ansitowin32.py:156: OSError
_____________________________________________ test_view_protobuf_request _____________________________________________

tdata = <mitmproxy.utils.data.Data object at 0x00000000087C8908>

    def test_view_protobuf_request(tdata):
        v = full_eval(protobuf.ViewProtobuf())
        p = tdata.path(datadir + "protobuf01")

        with open(p, "rb") as f:
            raw = f.read()
>       content_type, output = v(raw)

test\mitmproxy\contentviews\test_protobuf.py:15:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test\mitmproxy\contentviews\__init__.py:3: in call
    x = instance(data, **metadata)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <mitmproxy.contentviews.protobuf.ViewProtobuf object at 0x00000000087C8780>
data = b'\r\n$3bbc333c-e61c-433b-819a-0b9a8cc103b8', metadata = {}, decoded = False

    def __call__(self, data, **metadata):
        decoded = format_pbuf(data)
        if not decoded:
>           raise ValueError("Failed to parse input.")
E           ValueError: Failed to parse input.

mitmproxy\contentviews\protobuf.py:77: ValueError
_____________________________________________________ test_load ______________________________________________________

self = <mitmproxy.io.io.FlowReader object at 0x00000000090C2198>

    def stream(self) -> Iterable[flow.Flow]:
        """
                Yields Flow objects from the dump.
            """
        try:
            while True:
                # FIXME: This cast hides a lack of dynamic type checking
                loaded = cast(
                    Dict[Union[bytes, str], Any],
>                   tnetstring.load(self.fo),
                )

mitmproxy\io\io.py:43:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

file_handle = <_io.BufferedReader name='D:\\Pycharm\\begin_and_practice\\mitmproxy\\test\\mitmproxy\\data\\dumpfile-011
'>

    def load(file_handle: typing.BinaryIO) -> TSerializable:
        """load(file) -> object

        This function reads a tnetstring from a file and parses it into a
        python object.  The file must support the read() method, and this
        function promises not to read more data than necessary.
        """
        #  Read the length prefix one char at a time.
        #  Note that the netstring spec explicitly forbids padding zeros.
        c = file_handle.read(1)
        if c == b"":  # we want to detect this special case.
            raise ValueError("not a tnetstring: empty file")
        data_length = b""
        while c.isdigit():
            data_length += c
            if len(data_length) > 9:
                raise ValueError("not a tnetstring: absurdly large length prefix")
            c = file_handle.read(1)
        if c != b":":
            raise ValueError("not a tnetstring: missing or invalid length prefix")

        data = file_handle.read(int(data_length))
        data_type = file_handle.read(1)[0]

>       return parse(data_type, data)

mitmproxy\io\tnetstring.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

data_type = 56
data = b'8:response,1815:11:httpversion,8:1:1#1:1#]13:timestamp_end,14:1469208634.797^3:msg,2:OK,15:timestamp_start,14:
146920...om,7:headers,78:22:4:Host,11:example.com,]29:10:User-Agent,11:curl/7.46.0,]15:6:Accept,3:*/*,]]7:content,0:,7:
form_in,'

    def parse(data_type: int, data: bytes) -> TSerializable:
        if data_type == ord(b','):
            return data
        if data_type == ord(b';'):
            return data.decode("utf8")
        if data_type == ord(b'#'):
            try:
                return int(data)
            except ValueError:
                raise ValueError("not a tnetstring: invalid integer literal: {}".format(data))
        if data_type == ord(b'^'):
            try:
                return float(data)
            except ValueError:
                raise ValueError("not a tnetstring: invalid float literal: {}".format(data))
        if data_type == ord(b'!'):
            if data == b'true':
                return True
            elif data == b'false':
                return False
            else:
                raise ValueError("not a tnetstring: invalid boolean literal: {}".format(data))
        if data_type == ord(b'~'):
            if data:
                raise ValueError("not a tnetstring: invalid null literal")
            return None
        if data_type == ord(b']'):
            l = []
            while data:
                item, data = pop(data)
                l.append(item)  # type: ignore
            return l
        if data_type == ord(b'}'):
            d = {}
            while data:
                key, data = pop(data)
                val, data = pop(data)
                d[key] = val  # type: ignore
            return d
>       raise ValueError("unknown type tag: {}".format(data_type))
E       ValueError: unknown type tag: 56

mitmproxy\io\tnetstring.py:225: ValueError

During handling of the above exception, another exception occurred:

tdata = <mitmproxy.utils.data.Data object at 0x00000000090C20B8>

    def test_load(tdata):
        with open(tdata.path("mitmproxy/data/dumpfile-011"), "rb") as f:
            flow_reader = io.FlowReader(f)
>           flows = list(flow_reader.stream())

test\mitmproxy\io\test_compat.py:10:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <mitmproxy.io.io.FlowReader object at 0x00000000090C2198>

    def stream(self) -> Iterable[flow.Flow]:
        """
                Yields Flow objects from the dump.
            """
        try:
            while True:
                # FIXME: This cast hides a lack of dynamic type checking
                loaded = cast(
                    Dict[Union[bytes, str], Any],
                    tnetstring.load(self.fo),
                )
                try:
                    mdata = compat.migrate_flow(loaded)
                except ValueError as e:
                    raise exceptions.FlowReadException(str(e))
                if mdata["type"] not in FLOW_TYPES:
                    raise exceptions.FlowReadException("Unknown flow type: {}".format(mdata["type"]))
                yield FLOW_TYPES[mdata["type"]].from_state(mdata)
        except ValueError as e:
            if str(e) == "not a tnetstring: empty file":
                return  # Error is due to EOF
>           raise exceptions.FlowReadException("Invalid data format.")
E           mitmproxy.exceptions.FlowReadException: Invalid data format.

mitmproxy\io\io.py:55: FlowReadException
___________________________________________________ test_load_018 ____________________________________________________

self = <mitmproxy.io.io.FlowReader object at 0x00000000090D7748>

    def stream(self) -> Iterable[flow.Flow]:
        """
                Yields Flow objects from the dump.
            """
        try:
            while True:
                # FIXME: This cast hides a lack of dynamic type checking
                loaded = cast(
                    Dict[Union[bytes, str], Any],
>                   tnetstring.load(self.fo),
                )

mitmproxy\io\io.py:43:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

file_handle = <_io.BufferedReader name='D:\\Pycharm\\begin_and_practice\\mitmproxy\\test\\mitmproxy\\data\\dumpfile-018
'>

    def load(file_handle: typing.BinaryIO) -> TSerializable:
        """load(file) -> object

        This function reads a tnetstring from a file and parses it into a
        python object.  The file must support the read() method, and this
        function promises not to read more data than necessary.
        """
        #  Read the length prefix one char at a time.
        #  Note that the netstring spec explicitly forbids padding zeros.
        c = file_handle.read(1)
        if c == b"":  # we want to detect this special case.
            raise ValueError("not a tnetstring: empty file")
        data_length = b""
        while c.isdigit():
            data_length += c
            if len(data_length) > 9:
                raise ValueError("not a tnetstring: absurdly large length prefix")
            c = file_handle.read(1)
        if c != b":":
            raise ValueError("not a tnetstring: missing or invalid length prefix")

        data = file_handle.read(int(data_length))
        data_type = file_handle.read(1)[0]

>       return parse(data_type, data)

mitmproxy\io\tnetstring.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

data_type = 58
data = b'4:type;4:http;2:id;36:55367415-10f5-4938-b69f-8a523394f947;8:response;1851:15:timestamp_start;17:1482157524.36
1187^1...6:15:timestamp_start;18:1482157522.8949482^15:ssl_established;4:true!13:timestamp_end;0:~10:clientcert;0:~7:ad
dress;53'

    def parse(data_type: int, data: bytes) -> TSerializable:
        if data_type == ord(b','):
            return data
        if data_type == ord(b';'):
            return data.decode("utf8")
        if data_type == ord(b'#'):
            try:
                return int(data)
            except ValueError:
                raise ValueError("not a tnetstring: invalid integer literal: {}".format(data))
        if data_type == ord(b'^'):
            try:
                return float(data)
            except ValueError:
                raise ValueError("not a tnetstring: invalid float literal: {}".format(data))
        if data_type == ord(b'!'):
            if data == b'true':
                return True
            elif data == b'false':
                return False
            else:
                raise ValueError("not a tnetstring: invalid boolean literal: {}".format(data))
        if data_type == ord(b'~'):
            if data:
                raise ValueError("not a tnetstring: invalid null literal")
            return None
        if data_type == ord(b']'):
            l = []
            while data:
                item, data = pop(data)
                l.append(item)  # type: ignore
            return l
        if data_type == ord(b'}'):
            d = {}
            while data:
                key, data = pop(data)
                val, data = pop(data)
                d[key] = val  # type: ignore
            return d
>       raise ValueError("unknown type tag: {}".format(data_type))
E       ValueError: unknown type tag: 58

mitmproxy\io\tnetstring.py:225: ValueError

During handling of the above exception, another exception occurred:

tdata = <mitmproxy.utils.data.Data object at 0x00000000090D76A0>

    def test_load_018(tdata):
        with open(tdata.path("mitmproxy/data/dumpfile-018"), "rb") as f:
            flow_reader = io.FlowReader(f)
>           flows = list(flow_reader.stream())

test\mitmproxy\io\test_compat.py:18:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <mitmproxy.io.io.FlowReader object at 0x00000000090D7748>

    def stream(self) -> Iterable[flow.Flow]:
        """
                Yields Flow objects from the dump.
            """
        try:
            while True:
                # FIXME: This cast hides a lack of dynamic type checking
                loaded = cast(
                    Dict[Union[bytes, str], Any],
                    tnetstring.load(self.fo),
                )
                try:
                    mdata = compat.migrate_flow(loaded)
                except ValueError as e:
                    raise exceptions.FlowReadException(str(e))
                if mdata["type"] not in FLOW_TYPES:
                    raise exceptions.FlowReadException("Unknown flow type: {}".format(mdata["type"]))
                yield FLOW_TYPES[mdata["type"]].from_state(mdata)
        except ValueError as e:
            if str(e) == "not a tnetstring: empty file":
                return  # Error is due to EOF
>           raise exceptions.FlowReadException("Invalid data format.")
E           mitmproxy.exceptions.FlowReadException: Invalid data format.

mitmproxy\io\io.py:55: FlowReadException
____________________________________________________ test_mitmweb ____________________________________________________

event_loop = <_WindowsSelectorEventLoop running=False closed=False debug=False>
tdata = <mitmproxy.utils.data.Data object at 0x0000000009632550>

    def test_mitmweb(event_loop, tdata):
        asyncio.set_event_loop(event_loop)
        main.mitmweb([
            "--no-web-open-browser",
            "-s", tdata.path(shutdown_script),
>           "-q", "-p", "0",
        ])

test\mitmproxy\tools\test_main.py:14:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mitmproxy\tools\_main.py:174: in mitmweb
    run(web.master.WebMaster, cmdline.mitmweb, args)
mitmproxy\tools\_main.py:133: in run
    master.run()
mitmproxy\tools\web\master.py:110: in run
    http_server.listen(self.options.web_port, self.options.web_iface)
.tox\py37\lib\site-packages\tornado\tcpserver.py:143: in listen
    sockets = bind_sockets(port, address=address)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

port = 8081, address = '127.0.0.1', family = <AddressFamily.AF_UNSPEC: 0>, backlog = 128
flags = <AddressInfo.AI_PASSIVE: 1>, reuse_port = False

    def bind_sockets(port, address=None, family=socket.AF_UNSPEC,
                     backlog=_DEFAULT_BACKLOG, flags=None, reuse_port=False):
        """Creates listening sockets bound to the given port and address.

        Returns a list of socket objects (multiple sockets are returned if
        the given address maps to multiple IP addresses, which is most common
        for mixed IPv4 and IPv6 use).

        Address may be either an IP address or hostname.  If it's a hostname,
        the server will listen on all IP addresses associated with the
        name.  Address may be an empty string or None to listen on all
        available interfaces.  Family may be set to either `socket.AF_INET`
        or `socket.AF_INET6` to restrict to IPv4 or IPv6 addresses, otherwise
        both will be used if available.

        The ``backlog`` argument has the same meaning as for
        `socket.listen() <socket.socket.listen>`.

        ``flags`` is a bitmask of AI_* flags to `~socket.getaddrinfo`, like
        ``socket.AI_PASSIVE | socket.AI_NUMERICHOST``.

        ``reuse_port`` option sets ``SO_REUSEPORT`` option for every socket
        in the list. If your platform doesn't support this option ValueError will
        be raised.
        """
        if reuse_port and not hasattr(socket, "SO_REUSEPORT"):
            raise ValueError("the platform doesn't support SO_REUSEPORT")

        sockets = []
        if address == "":
            address = None
        if not socket.has_ipv6 and family == socket.AF_UNSPEC:
            # Python can be compiled with --disable-ipv6, which causes
            # operations on AF_INET6 sockets to fail, but does not
            # automatically exclude those results from getaddrinfo
            # results.
            # http://bugs.python.org/issue16208
            family = socket.AF_INET
        if flags is None:
            flags = socket.AI_PASSIVE
        bound_port = None
        for res in set(socket.getaddrinfo(address, port, family, socket.SOCK_STREAM,
                                          0, flags)):
            af, socktype, proto, canonname, sockaddr = res
            if (sys.platform == 'darwin' and address == 'localhost' and
                    af == socket.AF_INET6 and sockaddr[3] != 0):
                # Mac OS X includes a link-local address fe80::1%lo0 in the
                # getaddrinfo results for 'localhost'.  However, the firewall
                # doesn't understand that this is a local address and will
                # prompt for access (often repeatedly, due to an apparent
                # bug in its ability to remember granting access to an
                # application). Skip these addresses.
                continue
            try:
                sock = socket.socket(af, socktype, proto)
            except socket.error as e:
                if errno_from_exception(e) == errno.EAFNOSUPPORT:
                    continue
                raise
            set_close_exec(sock.fileno())
            if os.name != 'nt':
                try:
                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                except socket.error as e:
                    if errno_from_exception(e) != errno.ENOPROTOOPT:
                        # Hurd doesn't support SO_REUSEADDR.
                        raise
            if reuse_port:
                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
            if af == socket.AF_INET6:
                # On linux, ipv6 sockets accept ipv4 too by default,
                # but this makes it impossible to bind to both
                # 0.0.0.0 in ipv4 and :: in ipv6.  On other systems,
                # separate sockets *must* be used to listen for both ipv4
                # and ipv6.  For consistency, always disable ipv4 on our
                # ipv6 sockets and use a separate ipv4 socket when needed.
                #
                # Python 2.x on windows doesn't have IPPROTO_IPV6.
                if hasattr(socket, "IPPROTO_IPV6"):
                    sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY, 1)

            # automatic port allocation with port=None
            # should bind on the same port on IPv4 and IPv6
            host, requested_port = sockaddr[:2]
            if requested_port == 0 and bound_port is not None:
                sockaddr = tuple([host, bound_port] + list(sockaddr[2:]))

            sock.setblocking(0)
>           sock.bind(sockaddr)
E           OSError: [WinError 10048] 通常每个套接字地址(协议/网络地址/端口)只允许使用一次。

.tox\py37\lib\site-packages\tornado\netutil.py:168: OSError

FAIL: Full test coverage not reached!
Coverage for mitmproxy/: 98.81%
  mitmproxy\__init__.py: 0.00%
  mitmproxy\addons\onboardingapp\__init__.py: 0.00%
  mitmproxy\addons\termlog.py: 94.12%
  mitmproxy\contentviews\protobuf.py: 98.08%
  mitmproxy\coretypes\__init__.py: 0.00%
  mitmproxy\io\compat.py: 26.09%
  mitmproxy\net\__init__.py: 0.00%
  mitmproxy\utils\__init__.py: 0.00%
Coverage for pathod/: 100.00%

Excluded files:

  mitmproxy/proxy/protocol/base.py
  mitmproxy/proxy/protocol/http.py
  mitmproxy/proxy/protocol/http1.py
  mitmproxy/proxy/protocol/http2.py
  mitmproxy/proxy/protocol/http_replay.py
  mitmproxy/proxy/protocol/rawtcp.py
  mitmproxy/proxy/protocol/tls.py
  mitmproxy/proxy/root_context.py
  mitmproxy/proxy/server.py
  mitmproxy/tools/
  pathod/pathoc.py
  pathod/pathod.py
  pathod/protocols/http2.py
  pathod/test.py
  release/hooks


================================================== warnings summary ==================================================
d:\pycharm\begin_and_practice\mitmproxy\.tox\py37\lib\site-packages\hyperframe\flags.py:14: DeprecationWarning: Using o
r importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop workin
g
  class Flags(collections.MutableSet):

d:\pycharm\begin_and_practice\mitmproxy\.tox\py37\lib\site-packages\google\protobuf\internal\containers.py:182: Depreca
tionWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8
 it will stop working
  MutableMapping = collections.MutableMapping

d:\pycharm\begin_and_practice\mitmproxy\.tox\py37\lib\site-packages\google\protobuf\internal\containers.py:340: Depreca
tionWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8
 it will stop working
  collections.MutableSequence.register(BaseContainer)

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\platform\windows.py:174: DeprecationWarning: Using or importing the A
BCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
  class TcpConnectionTable(collections.Mapping):

D:\Pycharm\begin_and_practice\mitmproxy\examples\complex\xss_scanner.py:36: DeprecationWarning: invalid escape sequence
 \
  """

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\addons\view.py:106: DeprecationWarning: Using or importing the ABCs f
rom 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
  class View(collections.Sequence):

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\tools\console\help.py:94: DeprecationWarning: invalid escape sequence
 \.
  ("google\.com", "Url containing \"google.com"),

d:\pycharm\begin_and_practice\mitmproxy\.tox\py37\lib\site-packages\werkzeug\datastructures.py:16: DeprecationWarning:
Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop
 working
  from collections import Container, Iterable, MutableSet
d:\pycharm\begin_and_practice\mitmproxy\.tox\py37\lib\site-packages\werkzeug\datastructures.py:16: DeprecationWarning:
Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop
 working
  from collections import Container, Iterable, MutableSet

<unknown>:7: DeprecationWarning: invalid escape sequence \d

<unknown>:105: DeprecationWarning: invalid escape sequence \d

<unknown>:30: DeprecationWarning: invalid escape sequence \d

<unknown>:73: DeprecationWarning: invalid escape sequence \o

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\platform\pf.py:14: DeprecationWarning: invalid escape sequence \d
  address = re.sub("^::ffff:(?=\d+.\d+.\d+.\d+$)", "", address)

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\net\http\message.py:263: DeprecationWarning: Flags not at the start o
f the expression b'foo(?i)'
  pattern, repl, self.content, flags=flags, count=count

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

d:\pycharm\begin_and_practice\mitmproxy\.tox\py37\lib\site-packages\_pytest\fixtures.py:799: RemovedInPytest4Warning: F
ixture "data" called directly. Fixtures are not meant to be called directly, are created automatically when test functi
ons request them as parameters. See https://docs.pytest.org/en/latest/fixture.html for more information.
  res = fixturefunc(**kwargs)

d:\pycharm\begin_and_practice\mitmproxy\.tox\py37\lib\site-packages\_pytest\fixtures.py:799: RemovedInPytest4Warning: F
ixture "data" called directly. Fixtures are not meant to be called directly, are created automatically when test functi
ons request them as parameters. See https://docs.pytest.org/en/latest/fixture.html for more information.
  res = fixturefunc(**kwargs)

d:\pycharm\begin_and_practice\mitmproxy\.tox\py37\lib\site-packages\_pytest\fixtures.py:799: RemovedInPytest4Warning: F
ixture "data" called directly. Fixtures are not meant to be called directly, are created automatically when test functi
ons request them as parameters. See https://docs.pytest.org/en/latest/fixture.html for more information.
  res = fixturefunc(**kwargs)

source:14: DeprecationWarning: invalid escape sequence \[

source:14: DeprecationWarning: invalid escape sequence \[

source:14: DeprecationWarning: invalid escape sequence \[

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\utils\strutils.py:101: DeprecationWarning: invalid escape sequence '\
.'
  return codecs.escape_decode(data)[0]

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

c:\python37\Lib\asyncio\base_events.py:593: RuntimeWarning: coroutine 'run.<locals>.wakeup' was never awaited
  self._ready.clear()

D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\master.py:93: PendingDeprecationWarning: Task.all_tasks() is deprecat
ed, use asyncio.all_tasks() instead
  for p in asyncio.Task.all_tasks():

c:\python37\Lib\asyncio\base_events.py:593: RuntimeWarning: coroutine 'Session._writer' was never awaited
  self._ready.clear()
D:\Pycharm\begin_and_practice\mitmproxy\mitmproxy\utils\debug.py:70: RuntimeWarning: coroutine 'Script.watcher' was nev
er awaited
  gc.collect()

-- Docs: https://docs.pytest.org/en/latest/warnings.html
========================== 7 failed, 1415 passed, 1 skipped, 95 warnings in 161.70 seconds ===========================
?[22mone?[0m
?[0mERROR: InvocationError for command 'D:\\Pycharm\\begin_and_practice\\mitmproxy\\.tox\\py37\\Scripts\\pytest.EXE --t
imeout 60 --cov-report= --cov=mitmproxy --cov=pathod --cov=release --full-cov=mitmproxy/ --full-cov=pathod/' (exited wi
th code 1)
lint create: D:\Pycharm\begin_and_practice\mitmproxy\.tox\lint
lint installdeps: -rrequirements.txt
lint installed: apipkg==1.5,Arpeggio==1.9.0,asn1crypto==0.24.0,asynctest==0.12.2,atomicwrites==1.2.1,attrs==18.2.0,beau
tifulsoup4==4.6.3,blinker==1.4,brotlipy==0.7.0,certifi==2018.8.24,cffi==1.11.5,chardet==3.0.4,click==6.7,colorama==0.4.
0,coverage==4.5.1,cryptography==2.3.1,docutils==0.14,execnet==1.5.0,flake8==3.5.0,Flask==1.0.2,h11==0.8.1,h2==3.0.1,hpa
ck==3.0.0,hyperframe==5.1.0,idna==2.7,itsdangerous==0.24,Jinja2==2.10,kaitaistruct==0.8,ldap3==2.5.1,MarkupSafe==1.0,mc
cabe==0.6.1,-e git+https://github.com/zhixingheyi666/mitmproxy@57868ef5fab5c9f101126ec7981db2d769b22a4f#egg=mitmproxy,m
ore-itertools==4.3.0,mypy==0.590,packaging==18.0,parver==0.1.1,passlib==1.7.1,pluggy==0.7.1,protobuf==3.6.1,py==1.7.0,p
yasn1==0.4.4,pycodestyle==2.3.1,pycparser==2.19,pydivert==2.1.0,pyflakes==1.6.0,pyOpenSSL==18.0.0,pyparsing==2.2.2,pype
rclip==1.6.5,pytest==3.8.2,pytest-asyncio==0.9.0,pytest-cov==2.6.0,pytest-faulthandler==1.5.0,pytest-forked==0.2,pytest
-timeout==1.3.2,pytest-xdist==1.23.2,requests==2.19.1,rstcheck==3.3,ruamel.yaml==0.15.54,six==1.11.0,sortedcontainers==
2.0.5,tornado==5.1.1,tox==3.1.3,typed-ast==1.1.0,urllib3==1.23,urwid==2.0.1,virtualenv==16.0.0,Werkzeug==0.14.1,wsproto
==0.12.0
lint runtests: PYTHONHASHSEED='621'
lint runtests: commands[0] | mitmdump --version
Mitmproxy: 5.0.0.dev (+179, commit 57868ef)
Python:    3.7.0
OpenSSL:   OpenSSL 1.1.0i  14 Aug 2018
Platform:  Windows-7-6.1.7601-SP1
lint runtests: commands[1] | flake8 --jobs 8 mitmproxy pathod examples test release
d:\pycharm\begin_and_practice\mitmproxy\.tox\lint\lib\site-packages\pycodestyle.py:113: FutureWarning: Possible nested
set at position 1
  EXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')
lint runtests: commands[2] | python ./test/filename_matching.py
test/mitmproxy\contentviews\test_api.py DOES NOT MATCH a source file! Expected to find: mitmproxy\contentviews\api.py
test/mitmproxy\data\addonscripts\addon.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addonscripts\a
ddon.py
test/mitmproxy\data\addonscripts\concurrent_decorator.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data
\addonscripts\concurrent_decorator.py
test/mitmproxy\data\addonscripts\concurrent_decorator_class.py DOES NOT MATCH a source file! Expected to find: mitmprox
y\data\addonscripts\concurrent_decorator_class.py
test/mitmproxy\data\addonscripts\concurrent_decorator_err.py DOES NOT MATCH a source file! Expected to find: mitmproxy\
data\addonscripts\concurrent_decorator_err.py
test/mitmproxy\data\addonscripts\error.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addonscripts\e
rror.py
test/mitmproxy\data\addonscripts\load_error.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addonscri
pts\load_error.py
test/mitmproxy\data\addonscripts\recorder\a.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addonscri
pts\recorder\a.py
test/mitmproxy\data\addonscripts\recorder\b.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addonscri
pts\recorder\b.py
test/mitmproxy\data\addonscripts\recorder\c.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addonscri
pts\recorder\c.py
test/mitmproxy\data\addonscripts\recorder\e.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addonscri
pts\recorder\e.py
test/mitmproxy\data\addonscripts\recorder\error.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addon
scripts\recorder\error.py
test/mitmproxy\data\addonscripts\recorder\recorder.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\ad
donscripts\recorder\recorder.py
test/mitmproxy\data\addonscripts\same_filename\addon.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\
addonscripts\same_filename\addon.py
test/mitmproxy\data\addonscripts\shutdown.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addonscript
s\shutdown.py
test/mitmproxy\data\addonscripts\stream_modify.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\addons
cripts\stream_modify.py
test/mitmproxy\data\addonscripts\tcp_stream_modify.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\ad
donscripts\tcp_stream_modify.py
test/mitmproxy\data\scripts\all.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\scripts\all.py
test/mitmproxy\data\servercert\generate.py DOES NOT MATCH a source file! Expected to find: mitmproxy\data\servercert\ge
nerate.py
test/mitmproxy\net\data\verificationcerts\generate.py DOES NOT MATCH a source file! Expected to find: mitmproxy\net\dat
a\verificationcerts\generate.py
test/mitmproxy\test_fuzzing.py DOES NOT MATCH a source file! Expected to find: mitmproxy\fuzzing.py
test/mitmproxy\test_proxy.py DOES NOT MATCH a source file! Expected to find: mitmproxy\proxy.py
test/mitmproxy\test_taddons.py DOES NOT MATCH a source file! Expected to find: mitmproxy\taddons.py
test/mitmproxy\test_typemanager.py DOES NOT MATCH a source file! Expected to find: mitmproxy\typemanager.py
test/mitmproxy\tools\console\test_commander.py DOES NOT MATCH a source file! Expected to find: mitmproxy\tools\console\
commander.py
lint runtests: commands[3] | rstcheck README.rst
lint runtests: commands[4] | mypy --ignore-missing-imports ./mitmproxy ./pathod
lint runtests: commands[5] | mypy --ignore-missing-imports --follow-imports=skip ./examples/simple/ ./examples/pathod/
./examples/complex/
___________________________________ summary ___________________________________
ERROR:  py36: InterpreterNotFound: python3.6
ERROR:   py37: commands failed
  lint: commands succeeded

(venv) D:\Pycharm\begin_and_practice\mitmproxy>
